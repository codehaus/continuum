<plexus>
<!--
  <lifecycle-handler-manager implementation='org.codehaus.plexus.lifecycle.DefaultLifecycleHandlerManager'>
    <lifecycle-handlers>
      <lifecycle-handler implementation='org.codehaus.plexus.personality.avalon.AvalonLifecycleHandler'>
        <id>avalon</id>
        <name>Avalon Lifecycle Handler</name>
        <begin-segment>
          <phase implementation='org.codehaus.plexus.personality.avalon.lifecycle.phase.LogEnablePhase'/>
          <phase implementation='org.codehaus.plexus.personality.avalon.lifecycle.phase.ContextualizePhase'/>
          <phase implementation='org.codehaus.plexus.personality.avalon.lifecycle.phase.ServicePhase'/>
          <phase implementation='org.codehaus.plexus.personality.avalon.lifecycle.phase.ComposePhase'/>
          <phase implementation='org.codehaus.plexus.personality.avalon.lifecycle.phase.ConfigurePhase'/>
          <phase implementation='org.codehaus.plexus.personality.avalon.lifecycle.phase.InitializePhase'/>
          <phase implementation='org.codehaus.plexus.personality.avalon.lifecycle.phase.StartPhase'/>
        </begin-segment>
        <suspend-segment>
          <phase implementation='org.codehaus.plexus.personality.avalon.lifecycle.phase.SuspendPhase'/>
        </suspend-segment>
        <resume-segment>
          <phase implementation='org.codehaus.plexus.personality.avalon.lifecycle.phase.ResumePhase'/>
          <phase implementation='org.codehaus.plexus.personality.avalon.lifecycle.phase.RecontextualizePhase'/>
          <phase implementation='org.codehaus.plexus.personality.avalon.lifecycle.phase.ReconfigurePhase'/>
        </resume-segment>
        <end-segment>
          <phase implementation='org.codehaus.plexus.personality.avalon.lifecycle.phase.StopPhase'/>
          <phase implementation='org.codehaus.plexus.personality.avalon.lifecycle.phase.DisposePhase'/>
        </end-segment>
      </lifecycle-handler>
    </lifecycle-handlers>
  </lifecycle-handler-manager>
-->
<!--
  <configurations-directory>${plexus.home}/../../src/main/org/codehaus/plexus/continuum/</configurations-directory>
  <load-on-start>
    <component>
      <role>org.codehaus.plexus.synapse.acceptor.SocketAcceptor</role>
      <role-hint>smtp-socket-acceptor</role-hint>
    </component>
  </load-on-start>
-->
  <components>
    <component>
      <role>org.codehaus.plexus.synapse.SynapseServer</role>
<!--
      <role-hint>smtp-server</role-hint>
-->
      <implementation>org.codehaus.plexus.smtp.DefaultSmtpServer</implementation>
      <lifecycle-handler>avalon</lifecycle-handler>
    </component>
    <component>
      <role>org.codehaus.plexus.synapse.acceptor.SocketAcceptor</role>
<!--
      <role-hint>smtp-socket-acceptor</role-hint>
-->
      <implementation>org.codehaus.plexus.synapse.acceptor.DefaultSocketAcceptor</implementation>
      <lifecycle-handler>avalon</lifecycle-handler>
      <configuration>
        <port>10025</port>
      </configuration>
    </component>
    <component>
      <role>org.codehaus.plexus.synapse.reactor.Reactor</role>
      <implementation>org.codehaus.plexus.synapse.reactor.DefaultReactor</implementation>
      <lifecycle-handler>avalon</lifecycle-handler>
    </component>
    <component>
      <role>org.codehaus.plexus.synapse.socket.ServerSocketFactory</role>
      <implementation>org.codehaus.plexus.synapse.socket.DefaultServerSocketFactory</implementation>
      <lifecycle-handler>avalon</lifecycle-handler>
    </component>
    <component>
      <role>org.codehaus.plexus.dns.DNSResolver</role>
      <implementation>org.codehaus.plexus.dns.DNSJavaResolver</implementation>
      <lifecycle-handler>avalon</lifecycle-handler>
    </component>
    <component>
      <role>org.codehaus.plexus.smtp.queue.Queue</role>
      <implementation>org.codehaus.plexus.smtp.queue.MemoryQueue</implementation>
      <lifecycle-handler>avalon</lifecycle-handler>
    </component>
  </components>
</plexus>
