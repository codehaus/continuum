<configuration>

  <components>

    <component>
      <role>org.codehaus.plexus.velocity.VelocityComponent</role>
      <implementation>org.codehaus.plexus.velocity.DefaultVelocityComponent</implementation>
      <configuration>
        <properties>
          <property name="resource.loader" value="file"/>
          <property name="file.resource.loader.class" value="org.apache.velocity.runtime.resource.loader.FileResourceLoader"/>

          <!--
          <property name="file.resource.loader.path" value="${plexus.home}/applications/tambora/webview/tambora/templates/"/>
          -->

          <!-- DEVELOPEMENT
          -->
          <property name="file.resource.loader.path" value="${plexus.home}/../../../tambora-web-view/src/webapp/templates/"/>
          <property name="velocimacro.library" value="CommonMacros.vm"/>
          <property name="velocimacro.autoreload" value="true"/>
          <property name="file.resource.loader.cache " value="false"/>
          <property name="runtime.log.logsystem.class" value="org.codehaus.plexus.velocity.CommonsLoggingSystem"/>
          <property name="runtime.log.logsystem.log4j.category" value="org.codehaus.plexus.velocity.RuntimeVelocityComponentTest"/>
        </properties>
      </configuration>
    </component>

    <component>
      <role>org.codehaus.plexus.summit.rundata.RunData</role>
      <implementation>org.codehaus.plexus.summit.rundata.DefaultRunData</implementation>
      <instantiation-strategy>per-lookup</instantiation-strategy>
      <configuration/>
    </component>

    <component>
      <role>org.codehaus.plexus.summit.exception.ExceptionHandler</role>
      <implementation>org.codehaus.plexus.summit.exception.DefaultExceptionHandler</implementation>
      <configuration/>
    </component>

    <component>
      <role>org.codehaus.plexus.summit.parameters.RequestParameterParser</role>
      <implementation>org.codehaus.plexus.summit.parameters.SummitRequestParameterParser</implementation>
      <configuration>
        <defaultEncoding>US-ASCII</defaultEncoding>
        <fileUpload>
          <maxUploadSize>1048576</maxUploadSize>
          <maxMemorySize>10240</maxMemorySize>
          <tempDirectory>${plexus.work}/tambora</tempDirectory>
        </fileUpload>
      </configuration>
    </component>

    <component>
      <role>org.codehaus.plexus.summit.resolver.Resolver</role>
      <implementation>org.codehaus.plexus.summit.resolver.ClassicResolver</implementation>
      <configuration>
        <defaultView>Index.vm</defaultView>
        <errorView>Error.vm</errorView>
        <defaultBaseName>Default</defaultBaseName>
        <defaultViewExtension>vm</defaultViewExtension>
        <modulePackages>
          <modulePackage>org.codehaus.plexus.summit.demo</modulePackage>
        </modulePackages>
      </configuration>
    </component>

    <component>
      <role>org.codehaus.plexus.summit.renderer.Renderer</role>
      <implementation>org.codehaus.plexus.summit.renderer.VelocityRenderer</implementation>
      <configuration/>
    </component>

    <component>
      <role>org.codehaus.plexus.summit.display.Display</role>
      <implementation>org.codehaus.plexus.summit.display.ClassicBufferedDisplay</implementation>
      <configuration/>
    </component>

    <component>
      <role>org.codehaus.plexus.summit.pipeline.Pipeline</role>
      <role-hint>default</role-hint>
      <implementation>org.codehaus.plexus.summit.pipeline.SummitPipeline</implementation>
      <configuration>
        <name>Default Pipeline</name>
        <valveComponentIds>
          <valveId>target</valveId>
          <valveId>context</valveId>
          <valveId>activity</valveId>
          <valveId>resolve</valveId>
          <valveId>pull</valveId>
          <valveId>display</valveId>
        </valveComponentIds>
      </configuration>
    </component>

    <component>
      <id>context</id>
      <role>org.codehaus.plexus.summit.pipeline.valve.Valve</role>
      <implementation>org.zenplex.tambora.web.TamboraViewContextValve</implementation>
      <configuration/>
    </component>

    <component>
      <id>activity</id>
      <role>org.codehaus.plexus.summit.pipeline.valve.Valve</role>
      <implementation>org.zenplex.tambora.web.ActivityValve</implementation>
      <configuration/>
    </component>

    <component>
      <id>pull</id>
      <role>org.codehaus.plexus.summit.pipeline.valve.Valve</role>
      <implementation>org.codehaus.plexus.summit.pull.PullToolValve</implementation>
      <configuration/>
    </component>

    <component>
      <id>target</id>
      <role>org.codehaus.plexus.summit.pipeline.valve.Valve</role>
      <implementation>org.codehaus.plexus.summit.pipeline.valve.DetermineTargetValve</implementation>
      <configuration/>
    </component>

    <component>
      <id>resolve</id>
      <role>org.codehaus.plexus.summit.pipeline.valve.Valve</role>
      <implementation>org.codehaus.plexus.summit.pipeline.valve.ResolverValve</implementation>
      <configuration/>
    </component>

    <component>
      <id>display</id>
      <role>org.codehaus.plexus.summit.pipeline.valve.Valve</role>
      <implementation>org.codehaus.plexus.summit.pipeline.valve.DisplayValve</implementation>
      <configuration/>
    </component>

    <component>
      <role>org.codehaus.plexus.summit.pull.PullService</role>
      <implementation>org.codehaus.plexus.summit.pull.DefaultPullService</implementation>
      <configuration>
        <tool name="link" role="linktool" scope="request"/>
      </configuration>
    </component>

    <component>
      <role>linktool</role>
      <implementation>org.codehaus.plexus.summit.pull.tools.TemplateLink</implementation>
      <configuration/>
    </component>

    <!-- View Context Manager -->

    <component>
      <role>org.zenplex.tambora.web.context.ViewContextManager</role>
      <implementation>org.zenplex.tambora.web.context.DefaultViewContextManager</implementation>
      <configuration>
        <views>
          <view id="user">
            <scalar id="user" expression="store.getUser(#user)"/>
          </view>
          <view id="role">
            <scalar id="role" expression="store.getRole(#role)"/>
          </view>
          <view id="user-roles">
            <scalar id="user" expression="store.getUser(#user)"/>
            <scalar id="roles" expression="store.roles"/>
          </view>
          <view id="tpi">
            <scalar id="tpi" expression="store.getTradingPartner(#tpi)"/>
          </view>
          <view id="poSummary">
            <scalar id="purchaseOrders" expression='store.purchaseOrdersPendingApproval'/>
            <scalar id="orderConfirmations" expression='store.getMessages("org.zenplex.tambora.papinet.V2R10.OrderConfirmation")'/>
          </view>
          <view id="poDetail">
            <scalar id="po" expression='store.getMessage("org.zenplex.tambora.papinet.V2R10.PurchaseOrder",#id)'/>
            <scalar id="poHeader" expression='store.getMessage("org.zenplex.tambora.papinet.V2R10.PurchaseOrder",#id).purchaseOrderHeader'/>
            <scalar id="lineItems" expression='store.getMessage("org.zenplex.tambora.papinet.V2R10.PurchaseOrder",#id).purchaseOrderLineItem'/>
          </view>
          <view id="ocDetail">
            <scalar id="oc" expression='store.getMessage("org.zenplex.tambora.papinet.V2R10.OrderConfirmation",#id)'/>
            <scalar id="poHeader" expression='store.getMessage("org.zenplex.tambora.papinet.V2R10.PurchaseOrder",#id).purchaseOrderHeader'/>
            <scalar id="lineItems" expression='store.getMessage("org.zenplex.tambora.papinet.V2R10.PurchaseOrder",#id).purchaseOrderLineItem'/>
          </view>

          <!-- Messages -->
          <view id="availability-detail">
            <scalar id="message" expression="store.getAvailability(#id)"/>
          </view>
          <view id="call-off-detail">
            <scalar id="message" expression="store.getCallOff(#id)"/>
          </view>
          <view id="complaint-detail">
            <scalar id="message" expression="store.getComplaint(#id)"/>
          </view>
          <view id="complaint-response-detail">
            <scalar id="message" expression="store.getComplaintResponse(#id)"/>
          </view>
          <view id="credit-debit-note-detail">
            <scalar id="message" expression="store.getCreditDebitNote(#id)"/>
          </view>
          <view id="goods-receipt-detail">
            <scalar id="message" expression="store.getGoodsReceipt(#id)"/>
          </view>
          <view id="information-request-detail">
            <scalar id="message" expression="store.getInformationRequest(#id)"/>
          </view>
          <view id="inventory-change-detail">
            <scalar id="message" expression="store.getInventoryChange(#id)"/>
          </view>
          <view id="inventory-status-detail">
            <scalar id="message" expression="store.getInventoryStatus(#id)"/>
          </view>
          <view id="planning-detail">
            <scalar id="message" expression="store.getPlanning(#id)"/>
          </view>
          <view id="product-quality-detail">
            <scalar id="message" expression="store.getProductQuality(#id)"/>
          </view>
          <view id="rfq-detail">
            <scalar id="message" expression="store.getRFQ(#id)"/>
          </view>
          <view id="rfq-response-detail">
            <scalar id="message" expression="store.getRFQResponse(#id)"/>
          </view>

          <view id="invoice">
            <scalar id="message" expression='store.getMessage("org.zenplex.tambora.papinet.V2R10.Invoice",#invoice)'/>
          </view>
          <view id="usage">
            <scalar id="message" expression='store.getMessage("org.zenplex.tambora.papinet.V2R10.Usage",#usage)'/>
          </view>
          <view id="delivery-message">
            <scalar id="message" expression='store.getMessage("org.zenplex.tambora.papinet.V2R10.DeliveryMessage","DeliveryMessage-Test-00000")'/>
          </view>
          <view id="order-status">
            <scalar id="message" expression='store.getMessage("org.zenplex.tambora.papinet.V2R10.OrderStatus","OrderStatus-Test-00000")'/>
          </view>
        </views>
      </configuration>
    </component>

    <component>
      <role>org.codehaus.plexus.i18n.I18N</role>
      <implementation>org.codehaus.plexus.i18n.DefaultI18N</implementation>
      <configuration>
        <default-bundle-name>org.zenplex.tambora.Tambora</default-bundle-name>
      </configuration>
    </component>

  </components>

  <!-- This is to trick the plexus plugin into grabbing the POM for summit -->
  <implementation>org.codehaus.plexus.summit.Summit</implementation>

</configuration>
